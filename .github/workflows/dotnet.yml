name: .NET Build and NuGet Publish

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
    paths:
      - 'src/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ "main" ]

env:
  DOTNET_VERSION: '9.0.x'
  SOLUTION_PATH: 'src/FlexiPane.sln'
  
jobs:
  build:
    runs-on: windows-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 전체 히스토리 가져오기 (태그 정보 필요)
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache .NET packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    - name: Extract version from Directory.Build.props
      id: version
      run: |
        # Directory.Build.props에서 버전 추출
        $propsFile = "src/Directory.Build.props"
        if (Test-Path $propsFile) {
          $content = Get-Content $propsFile -Raw
          $versionMatch = [regex]::Match($content, '<Version>([^<]+)</Version>')
          if ($versionMatch.Success) {
            $version = $versionMatch.Groups[1].Value
            echo "version=$version" >> $env:GITHUB_OUTPUT
            echo "Using Directory.Build.props version: $version"
          } else {
            $version = "1.0.0-dev.${{ github.run_number }}"
            echo "version=$version" >> $env:GITHUB_OUTPUT
            echo "No version found in props, using dev version: $version"
          }
        } else {
          $version = "1.0.0-dev.${{ github.run_number }}"
          echo "version=$version" >> $env:GITHUB_OUTPUT
          echo "Directory.Build.props not found, using dev version: $version"
        }
    
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}
    
    - name: Build
      run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --no-restore -p:Version=${{ steps.version.outputs.version }}
    
    - name: Test
      run: dotnet test ${{ env.SOLUTION_PATH }} --no-build --verbosity normal --configuration Release --logger trx --results-directory test-results/ || true
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: test-results/

  pack-and-publish:
    needs: build
    runs-on: windows-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache .NET packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}
    
    - name: Pack FlexiPane
      run: |
        Write-Host "Packaging with version: ${{ needs.build.outputs.version }}"
        dotnet pack src/FlexiPane/FlexiPane.csproj --configuration Release --output nupkg -p:Version=${{ needs.build.outputs.version }}
        
        # 생성된 패키지 파일 확인
        if (Test-Path "nupkg/*.nupkg") {
          Get-ChildItem nupkg/*.nupkg | ForEach-Object { Write-Host "Created package: $($_.Name)" }
        } else {
          Write-Host "❌ No package files created!"
          exit 1
        }
    
    - name: Check if should publish to NuGet
      id: should-publish
      run: |
        $shouldPublish = $false
        $reason = "Unknown"

        # 수동 실행인 경우
        if ('${{ github.event_name }}' -eq 'workflow_dispatch') {
          $shouldPublish = $true
          $reason = "Manual workflow dispatch"
        }
        # Directory.Build.props 파일이 변경된 경우 (main 브랜치)
        elseif ('${{ github.ref }}' -eq 'refs/heads/main') {
          # 최근 커밋에서 Directory.Build.props 파일이 변경되었는지 확인
          $changedFiles = git diff --name-only HEAD~1 HEAD
          if ($changedFiles -contains 'src/Directory.Build.props') {
            $shouldPublish = $true
            $reason = "Directory.Build.props version updated"
          } else {
            $shouldPublish = $false
            $reason = "No version file changes detected"
          }
        }

        Write-Host "Should publish: $shouldPublish"
        Write-Host "Reason: $reason"

        echo "should-publish=$($shouldPublish.ToString().ToLower())" >> $env:GITHUB_OUTPUT
        echo "reason=$reason" >> $env:GITHUB_OUTPUT
    
    - name: Push to NuGet
      if: steps.should-publish.outputs.should-publish == 'true'
      run: |
        Write-Host "🚀 Publishing to NuGet..."
        Write-Host "Reason: ${{ steps.should-publish.outputs.reason }}"
        
        $packages = Get-ChildItem nupkg/*.nupkg
        if ($packages.Count -eq 0) {
          Write-Host "❌ No NuGet packages found"
          exit 1
        }
        
        foreach ($package in $packages) {
          Write-Host "📦 Publishing: $($package.Name)"
          try {
            dotnet nuget push $package.FullName --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }} --skip-duplicate --timeout 300
            Write-Host "✅ Successfully published: $($package.Name)"
          }
          catch {
            Write-Host "❌ Failed to publish: $($package.Name)"
            Write-Host $_.Exception.Message
            exit 1
          }
        }
    
    - name: Upload packages
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: nupkg/*.nupkg

